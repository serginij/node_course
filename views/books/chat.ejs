<div class="row mt-4">
  <div class="col-sm-8">
      <div class="card">
          <div class="card-body">
              <div class='d-flex justify-content-between'>
                  <h5 class="card-title">Book chat</h5>
                  <p class="card-text" id='onlineCounter'>Online: 1</p>
              </div>

              <div class="form-group">
                <b class='card-label'>ID</b>
                <p class="card-text"><%= chat._id %></p>
              </div>
              
              <div class="form-group mb-2">
                <label class='card-label'>All messages</label>
                <div id="list" class="card list-group" style="min-height: 40px; max-height: 400px; overflow-y: scroll;"></div>
              </div>

              <div class="form-group">
                <label class='card-label' for="chatMessage">Send message</label>
                <textarea
                  rows="3"
                  name="message"
                  class="form-control"
                  id="chatMessage"
                ><%= chat.message %></textarea>
              </div>

              <div class="text-right">
                  <button type="button" id='send-room' class="btn btn-sm btn-primary">
                      Send
                  </button>
              </div>
          </div>
      </div>
  </div>
</div>
<script>
    const roomName = location.pathname.split('/').pop();
    const socket = io.connect('/', {query: `roomName=${roomName}`});
    const messagesList = document.querySelector('#list');
    const messageInput = document.querySelector('#chatMessage');
    const sendRoom = document.querySelector('#send-room');
    const counter = document.querySelector('#onlineCounter')

    let username = "<%= chat.user %>";

    const getTmp = (msg) => {
        return `
                <div class="list-group-item list-group-item-action">
                    <div class="d-flex w-100 justify-content-between">
                        <small>${msg.username}</small>
                        <small class="text-muted">${msg.type}</small>
                    </div>
                    <p class="mb-1">${msg.text}</p>
                </div>
        `;
    };

    socket.on('message-to-room', (msg) => {
        const div = getTmp(msg);
        messagesList.insertAdjacentHTML('beforeend', div);
    });

    socket.on('update-online', (count) => {
      counter.innerHTML = `Online: ${count}`
    })

    sendRoom.addEventListener('click', () => {
        socket.emit('message-to-room', {
            username,
            text: messageInput.value,
        });
        messageInput.value = "";
    });
</script>